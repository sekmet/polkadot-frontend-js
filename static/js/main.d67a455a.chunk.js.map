{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","Balances.js","LatestBlocks.js","BlockNumber.js","SearchBlock.js","Events.js","Interactor.js","Metadata.js","NodeInfo.js","TemplateModule.js","Transfer.js","Upgrade.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","accountSelected","setAccountSelected","chainSelected","setChainSelected","chainOptions","text","icon","initialChain","getCurrentChain","localStorage","getItem","keyringOptions","getPairs","account","toUpperCase","initialAddress","onChangeChain","chainurl","chain","setItem","assign","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","marginLeft","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","target","rel","href","circular","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","system","balance","data","free","toHuman","Label","pointing","Icon","AccountSelector","accounts","balances","setBalances","addresses","unsubscribeAll","multi","balancesMap","acc","index","Grid","Column","Table","celled","striped","Body","Row","Cell","width","textAlign","display","minWidth","compact","blocks","setBlocks","getBlocks","derive","subscribeNewHeads","header","number","prevState","hash","Header","HeaderCell","block","idx","ribbon","fontWeight","textTransform","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","bestNumberFinalized","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","extra","BlockNumber","version","setMetadata","foundblock","setFoundblock","searchType","setSearchType","searchParam","setSearchParam","getMetadata","searchByNumber","getBlockHash","blockHash","getHeader","foundBlockHeader","getBlock","signedBlock","events","allRecords","extrinsics","isSigned","method","args","section","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eq","event","blockResult","join","documentation","d","message","searchByHash","foundBlock","blockHeader","get","onSearchTypeChange","ev","onSearchParamChange","Form","Meta","overflowX","inline","Radio","checked","Field","Input","fluid","Modal","trigger","scrolling","Description","overflowWrap","Searchblock","FILTERED_EVENTS","eventFeed","setEventFeed","record","typeDef","eventName","includes","summary","extraText","content","allEvents","feedMaxHeight","float","floated","Feed","clear","overflow","maxHeight","Events","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","setPalletRPCs","callables","setCallables","setParamFields","initFormState","formState","setFormState","getApiType","apiType","Object","keys","sort","pr","c","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","metaParam","isOptional","onPalletCallableParamChange","res","onInterxTypeChange","getOptionalMsg","InteractorSubmit","Interactor","metadata","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","NodeInfo","currentValue","setCurrentValue","formValue","setFormValue","templateModule","something","newValue","unwrap","centered","TemplateModule","addressTo","amount","prev","proposal","setProposal","handleFileChosen","file","fileReader","FileReader","onloadend","buffer","Array","from","Uint8Array","b","padStart","readAsArrayBuffer","accept","files","accountAddress","getPair","loader","Dimmer","active","Loader","columns","padded","Message","negative","floating","contextRef","createRef","ref","Sticky","context","stackable","stretched","App","ReactDOM","render","document","getElementById"],"mappings":"khCAEMA,EAAYC,EAAQ,MAOpBC,EAJc,CAClB,4BACA,iCAE0BC,QAAO,SAACC,EAAKC,GAGvC,YADuBC,IAAnBC,wIAAYF,KAAkBD,EAAIC,EAAEG,MAAM,KAAOD,wIAAYF,IAC1DD,IACN,IAGYK,EADH,uCAAQC,GAAiBV,GAAcE,GCH7CS,EADcC,IAAYC,MAAMC,OAAOC,SAASC,QAClBC,KAAOR,EAAOS,gBAClDC,QAAQC,IAAR,4BAAiCT,IAKjC,IAAMU,EAAa,CACjBC,OAAQX,EACRY,QAAQ,2BAAMA,KAAYd,EAAOe,KACjCC,MAAOhB,EAAOiB,aACdC,QAAS,KACTC,aAAc,KACdC,IAAK,KACLC,SAAU,KACVC,SAAU,MAMNC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBF,SAAU,iBAE/B,IAAK,UACH,OAAO,2BAAKE,GAAZ,IAAmBJ,IAAKK,EAAOE,QAASL,SAAU,eAEpD,IAAK,kBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,UAE/B,IAAK,gBACH,OAAO,2BAAKE,GAAZ,IAAmBF,SAAU,QAASD,SAAUI,EAAOE,UAEzD,IAAK,eACH,OAAO,2BAAKH,GAAZ,IAAmBL,aAAc,YAEnC,IAAK,cACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAASO,EAAOE,QAASR,aAAc,UAE5D,IAAK,gBACH,OAAO,2BAAKK,GAAZ,IAAmBN,QAAS,KAAMC,aAAc,UAElD,QACE,MAAM,IAAIS,MAAJ,wBAA2BH,EAAOC,SA8B1CG,GAAY,EA4BVC,EAAmBC,IAAMC,gBAEzBC,EAA2B,SAACC,GAEhC,IAAMC,EAAS,eAAQvB,GACC,CAAC,SAAU,SACnBwB,SAAQ,SAAAC,GACtBF,EAAUE,GAA8B,qBAAfH,EAAMG,GAAuBF,EAAUE,GAAOH,EAAMG,MALrC,MAQhBC,qBAAWf,EAASY,GARJ,mBAQnCX,EARmC,KAQ5Be,EAR4B,KAY1C,OAjEc,SAACf,EAAOe,GAAc,IAC5BjB,EAAqCE,EAArCF,SAAUT,EAA2BW,EAA3BX,OAAQC,EAAmBU,EAAnBV,QAASE,EAAUQ,EAAVR,MAEnC,IAAIM,EAAJ,CAEAiB,EAAS,CAAEb,KAAM,iBAEjB,IAAMc,EAAW,IAAIC,aAAW5B,GAC1B6B,EAAO,IAAIC,aAAW,CAAEH,WAAUxB,QAAOR,IAAKM,IAGpD4B,EAAKE,GAAG,aAAa,WACnBL,EAAS,CAAEb,KAAM,UAAWC,QAASe,IAErCA,EAAKG,QAAQC,MAAK,SAACJ,GAAD,OAAUH,EAAS,CAAEb,KAAM,0BAE/CgB,EAAKE,GAAG,SAAS,kBAAML,EAAS,CAAEb,KAAM,uBACxCgB,EAAKE,GAAG,SAAS,SAAAG,GAAG,OAAIR,EAAS,CAAEb,KAAM,gBAAiBC,QAASoB,QA6CnEC,CAAQxB,EAAOe,GAtCI,SAACf,EAAOe,GAC3B,IAAMU,EAAiB,uCAAG,4BAAAC,EAAA,6DACxBX,EAAS,CAAEb,KAAM,iBADO,kBAGhByB,qBAAWnD,EAAOoD,UAHF,uBAIEC,yBAJF,OAKtBC,GADIA,EAJkB,QAKIC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,MAC3B,CAAED,UAASC,KAAK,2BAAMA,GAAP,IAAaC,KAAK,GAAD,OAAKD,EAAKC,KAAV,aAAmBD,EAAKE,OAAxB,WACnCzC,IAAQ0C,QAAQ,CAAEC,cAAe7D,EAAO8D,qBAAuBR,GAC/Df,EAAS,CAAEb,KAAM,cAAeC,QAAST,MARnB,kDAUtBR,QAAQqD,MAAR,MACAxB,EAAS,CAAEb,KAAM,kBAXK,0DAAH,qDAiBvB,IAFyBF,EAAjBL,aAER,CAEA,GAAIU,EAAW,OAAOU,EAAS,CAAEb,KAAM,cAAeC,QAAST,MAG/DW,GAAY,EACZoB,KAeAe,CAAaxC,EAAOe,GAEb,kBAACT,EAAiBmC,SAAlB,CAA2BC,MAAO1C,GACtCU,EAAMiC,WAULC,EAAe,iCAAYC,qBAAWvC,KChI7BwC,EAXD,CACZC,gBAAiB,CACfC,IAAK,CACH,mBACA,YACA,KAAM,MAAO,MAAO,MAAO,OAC3B,KAAM,MAAO,MAAO,MAAO,U,kBCEjC,SAASC,EAAT,GASI,IAAD,IARDC,mBAQC,MARa,KAQb,EAPDC,EAOC,EAPDA,MACAC,EAMC,EANDA,UAMC,IALDC,aAKC,MALO,OAKP,MAJDC,aAIC,MAJO,KAIP,MAHDpD,YAGC,MAHM,QAGN,MAFDqD,aAEC,MAFO,KAEP,MADDC,gBACC,SAEO5D,EAAQgD,IAARhD,IAFP,EAGyB6D,mBAAS,MAHlC,mBAGMC,EAHN,KAGaC,EAHb,OAI6BF,mBAAS,MAJtC,mBAIMG,EAJN,KAIeC,EAJf,KAMOC,EAAkDP,EAAlDO,UAAWC,EAAuCR,EAAvCQ,SAAUC,EAA6BT,EAA7BS,YAAaC,EAAgBV,EAAhBU,YAGpCC,EAAS,iBAAe,YAAThE,GACfiE,EAAkB,iBAAe,sBAATjE,GAc9BkE,qBARoB,WAClB,sBAAC,4BAAA1C,EAAA,yDACM9B,GAAQA,EAAIyE,MAAMC,KADxB,iEAEuB1E,EAAIyE,MAAMC,KAAKzD,MAFtC,QAEO+C,EAFP,QAGSW,QAAUV,EAAW,MAAQA,EAAWD,EAAQY,YAHzD,0CAAD,KAOqB,CAAC5E,IAExB,IAsKiB6E,EAtKXC,EAAW,uCAAG,oCAAAhD,EAAA,yDAEhBM,EAEEkB,EAFFlB,QAFgB,EAIdkB,EADFjB,KAAQE,EAHQ,EAGRA,QAHQ,EAGAwC,WAHA,gCASOC,yBAAezC,GATtB,OASV0C,EATU,OAUhBC,EAAW9C,EACXpC,EAAImF,UAAUF,EAASG,QAXP,uBAahBF,EAAW5B,EAbK,iCAgBX4B,GAhBW,4CAAH,qDAmBXG,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACnBA,EAAOC,YACH/B,EAAU,uCAAD,OAA8B8B,EAAOE,YAAYZ,aAC1DpB,EAAU,+BAAD,OAAgC8B,EAAOhF,QAEhDmF,EAAe,SAAA9D,GAAG,OACtB6B,EAAU,oCAAD,OAA2B7B,EAAIiD,cAEpCc,EAAM,uCAAG,oCAAA5D,EAAA,sEACUgD,IADV,OACPI,EADO,OAEPS,EAAcC,GAAgBvB,EAAaD,GAE3CyB,EAAYF,EACd3F,EAAI8F,GAAGpB,KAAKA,MAAK,EAAA1E,EAAI8F,GAAG5B,IAAWC,GAAlB,oBAA+BwB,KAChD3F,EAAI8F,GAAGpB,KAAKA,KAAK1E,EAAI8F,GAAG5B,GAAWC,MAEjCL,EAAQ+B,EAAUE,YAAYb,EAAUG,GAC3CW,MAAMP,GACT1B,GAAS,kBAAMD,KAVF,2CAAH,qDAaNmC,EAAe,uCAAG,kCAAAnE,EAAA,sEACCgD,IADD,OAChBI,EADgB,OAEhBW,EACF7F,EAAI8F,GAAGpB,KAAKwB,qBAAoB,EAAAlG,EAAI8F,GAAG5B,IAAWC,GAAlB,oBAA+BC,IAAc,GAE3EN,EAAQ+B,EAAUE,YAAYb,EAAUG,GAC3CW,MAAMP,GACT1B,GAAS,kBAAMD,KAPO,2CAAH,qDAUfqC,EAAQ,uCAAG,oCAAArE,EAAA,sEACQgD,IADR,cACTI,EADS,OAETS,EAAcC,GAAgBvB,EAAaD,GAG3CyB,EAAYF,GACd,EAAA3F,EAAI8F,GAAG5B,IAAWC,GAAlB,oBAA+BwB,IAC/B3F,EAAI8F,GAAG5B,GAAWC,KAPP,SASK0B,EAAUE,YAAYb,EAAUG,GACjDW,MAAMP,GAVM,OAST3B,EATS,OAWfC,GAAS,kBAAMD,KAXA,2CAAH,qDAcRsC,EAAU,uCAAG,kCAAAtE,EAAA,6DACX6D,EAAcC,GAAgBvB,EAAaD,GAE3CyB,EAAYF,GACd,EAAA3F,EAAI8F,GAAG5B,IAAWC,GAAlB,oBAA+BwB,IAC/B3F,EAAI8F,GAAG5B,GAAWC,KALL,SAOG0B,EAAUQ,KAAKhB,GAChCW,MAAMP,GARQ,OAOX3B,EAPW,OASjBC,GAAS,kBAAMD,KATE,2CAAH,qDAYVwC,EAAkB,SAAAC,GAAM,OAC5BA,EAAOC,OAAShD,EAAU,QAAUA,EAAU+C,EAAO3B,aAEjDH,EAAK,uCAAG,gCAAA3C,EAAA,6DACN6D,EAAcC,GAAgBvB,EAAaD,GADrC,UAEQ,EAAApE,EAAIyE,MAAMP,IAAWC,GAArB,oBAAkCwB,GAAlC,QAA+CW,KAFvD,OAENxC,EAFM,OAGZC,GAAS,kBAAMD,KAHH,2CAAH,qDAML1E,EAAG,uCAAG,gCAAA0C,EAAA,6DACJ6D,EAAcC,GAAgBvB,EAAaD,EAAa,CAAEqC,aAAa,IADnE,UAEU,EAAAzG,EAAIZ,IAAI8E,IAAWC,GAAnB,oBAAgCwB,GAAhC,QAA6CW,KAFvD,OAEJxC,EAFI,OAGVC,GAAS,kBAAMD,KAHL,2CAAH,qDAMH4C,EAAW,WACf,IAAMH,EAASvG,EAAI2G,OAAOzC,GAAWC,GACrCoC,EAAOC,OAAShD,EAAU,QAAUA,EAAU+C,EAAO3B,aAGjDgC,EAAW,uCAAG,sBAAA9E,EAAA,sDACdgC,IACFA,IACAC,EAAS,OAGXP,EAAU,cAETc,KAAYoB,KACZnB,KAAqB0B,KAvHQ,cAAT3F,GAwHN6F,KAzHiB,gBAAT7F,GA0HN8F,KA7HY,UAAT9F,GA8HNmE,KAzHa,QAATnE,GA0HNlB,KAzHoB,aAATkB,GA0HNoG,IAdC,2CAAH,qDAiBXd,GAAkB,SAACvB,EAAaD,GAA+C,IAAlCyC,EAAiC,uDAA1B,CAAEJ,aAAa,GAGjEK,EAAW1C,EAAYjC,KAAI,SAAA4E,GAE/B,MAA0B,kBAAfA,GAA0C,OAAfA,GAAmD,kBAArBA,EAAWjE,MACtEiE,EAAWjE,MAAMkE,OACO,kBAAfD,EACTA,EAAWC,OAEbD,KAEHE,EAAS5C,EAAYlC,KAAI,SAAC+E,EAAOC,GAAR,mBAAC,eAAqBD,GAAtB,IAA6BpE,MAAOgE,EAASK,IAAQ,UAEpF,OAAOF,EAAO3I,QAAO,SAAC8I,EAAD,GAAuC,IAAD,IAA7B9G,YAA6B,MAAtB,SAAsB,EAAZwC,EAAY,EAAZA,MAC7C,GAAa,MAATA,GAA2B,KAAVA,EAAc,OAAQ+D,EAAKJ,YAAL,sBAAuBW,GAAvB,CAA6B,OAAQA,EAEhF,IAAIC,EAAYvE,EAGhB,OAAIxC,EAAKgH,QAAQ,SAAW,GAE1BD,GADAA,EAAYA,EAAUE,MAAM,KAAKpF,KAAI,SAAAqF,GAAC,OAAIA,EAAER,WACtB7E,KAAI,SAAAsF,GAAM,OAAIC,GAAUpH,GACzCmH,EAAOH,QAAQ,MAAQ,EAAIK,OAAOC,WAAWH,GAAUE,OAAOE,SAASJ,GACxEA,KAEE,GAAN,mBAAWL,GAAX,CAAiBC,MAIfK,GAAUpH,KACZ+G,EAAYA,EAAUC,QAAQ,MAAQ,EAAIK,OAAOC,WAAWP,GAAaM,OAAOE,SAASR,IAErF,GAAN,mBAAWD,GAAX,CAAiBC,OAChB,KAGCK,GAAY,SAAApH,GAAI,OACpB4C,EAAMC,gBAAgBC,IAAI0E,MAAK,SAAAC,GAAE,OAAIzH,EAAKgH,QAAQS,IAAO,MAoB3D,OACE,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLxE,MAAOA,EACPC,MAAOA,EACPpD,KAAK,SACL4H,QAAStB,EACThD,SAAWA,IAAaM,IAAcC,KAxBb,IAAvBE,EAAY8D,QAET9D,EAAY+D,OAAM,SAACC,EAAYlB,GACpC,IAAMmB,EAAQlE,EAAY+C,GAC1B,GAAIkB,EAAWE,SAAY,OAAO,EAClC,GAAa,MAATD,EAAiB,OAAO,EAE5B,IAAMxF,EAAyB,kBAAVwF,EAAqBA,EAAMxF,MAAQwF,EACxD,OAAiB,OAAVxF,GAA4B,KAAVA,QAiBrBwB,KAAYC,OAbHM,EAamCvB,IAZ7CU,GAAYa,GACVA,EAASzC,UAAY4B,KAazBT,GAoBP,SAASiF,EAAe1H,GACtB,OACE,kBAACkH,EAAA,EAAOS,MAAR,KACE,kBAACpF,EAAD,eACEE,MAAM,WACNjD,KAAK,cACLmD,MAAM,QACF3C,IAEN,kBAACkH,EAAA,EAAOU,GAAR,MACA,kBAACrF,EAAD,eACEE,MAAM,SACNjD,KAAK,YACLmD,MAAM,QACF3C,IAEN,kBAACkH,EAAA,EAAOU,GAAR,MACA,kBAACrF,EAAD,eACEE,MAAM,OACNjD,KAAK,UACLmD,MAAM,OACF3C,KCtQG,SAAS6H,EAAkB7H,GAAQ,IAAD,EACEkC,IAAzChD,EADuC,EACvCA,IAAKE,EADkC,EAClCA,SAAUJ,EADwB,EACxBA,QAASC,EADe,EACfA,aAMhC,MALiB,UAAbG,IAAwBjB,OAAOe,IAAMA,GACpB,UAAjBD,IAA4Bd,OAAOa,QAAUA,GACjDb,OAAO2J,KAAOxK,EAAQ,IACtBa,OAAO4J,WAAazK,EAAQ,KAErB,K,6DCKT,SAAS0K,EAAMhI,GAAQ,IACbhB,EAAYkD,IAAZlD,QACAiJ,EAAsBjI,EAAtBiI,kBAFY,EAG0BlF,mBAAS,IAHnC,mBAGbmF,EAHa,KAGIC,EAHJ,OAIsBpF,mBAAS,IAJ/B,mBAIbqF,EAJa,KAIEC,EAJF,KAOdC,EAAe,CAAC,CACpBnI,IAAK,WACL6B,MAAO,wBACPuG,KAAM,kBACNC,KAAM,SACL,CACDrI,IAAK,SACL6B,MAAO,+BACPuG,KAAM,SACNC,KAAM,SACL,CACDrI,IAAK,YACL6B,MAAO,+BACPuG,KAAM,YACNC,KAAM,QACL,CACDrI,IAAK,YACL6B,MAAO,sBACPuG,KAAM,aACNC,KAAM,SAGFC,EACJH,EAAajB,OAAS,EAAIiB,EAAa,GAAGtG,MAAQ,GAM9C0G,EAAkB,WACtB,OAAOC,aAAaC,QAAQ,iBAIxBC,EAAiB7J,EAAQ8J,WAAWzH,KAAI,SAAA0H,GAAO,MAAK,CACxD5I,IAAK4I,EAAQzH,QACbU,MAAO+G,EAAQzH,QACfiH,KAAMQ,EAAQxH,KAAKC,KAAKwH,cACxBR,KAAM,WAGFS,EACJJ,EAAexB,OAAS,EAAIwB,EAAe,GAAG7G,MAAQ,GAGxD0B,qBAAU,WACRuE,EAAkBgB,GAClBd,EAAmBc,GAIjBZ,EAHGK,GACcD,KAIlB,CAACR,EAAmBgB,EAAgBR,IAEvC,IAMMS,EAAgB,SAAAC,GApCE,IAACC,EAsCvBf,EAAiBc,GAtCMC,EAuCPD,EAtChBR,aAAaU,QAAQ,eAAgBD,GAuCrCjL,OAAOC,SAASkL,OAAhB,eAA+BH,KAGjC,OACE,kBAACI,EAAA,EAAD,CACEC,SAAS,MACTC,SAAO,EACP7G,MAAO,CACL8G,gBAAiB,OACjBC,YAAa,OACbC,WAAY,MACZC,cAAe,QAGjB,kBAACC,EAAA,EAAD,KACE,kBAACP,EAAA,EAAKA,KAAN,KACE,kBAACQ,EAAA,EAAD,CAAOC,IAAG,UAAKpM,wBAAL,8BAAyDqM,KAAK,UAE1E,kBAACV,EAAA,EAAKA,KAAN,CAAWW,SAAS,OAAOtH,MAAO,CAAEuH,WAAY,SAAUC,WAAY,QACpE,kBAACC,EAAA,EAAD,CACEhM,QAAM,EACNiM,WAAS,EACTC,WAAS,EACTC,YAAY,kBACZC,QAASnC,EACToC,SAAU,SAACC,EAAGC,GACZ1B,EAAc0B,EAAS5I,QAEzBA,MAAOoG,KAGX,kBAACmB,EAAA,EAAKA,KAAN,CAAWW,SAAS,QAAQtH,MAAO,CAAEuH,WAAY,WAC5CjC,EAWC,KAVA,0DAC0B,IAC1B,uBACE2C,OAAO,SACPC,IAAI,sBACJC,KAAK,4CAHP,0BASJ,kBAAC,kBAAD,CAAiBxC,KAAML,GACrB,kBAAChB,EAAA,EAAD,CACEC,OAAK,EACL6D,UAAQ,EACRf,KAAK,QACLzB,KAAK,OACL7F,MAAOuF,EAAkB,QAAU,SAGvC,kBAACmC,EAAA,EAAD,CACEhM,QAAM,EACNiM,WAAS,EACTC,WAAS,EACTC,YAAY,oBACZC,QAAS5B,EACT6B,SAAU,SAACC,EAAGC,GArEP,IAAAtJ,IAsEIsJ,EAAS5I,MApE5BiG,EAAkB3G,GAClB6G,EAAmB7G,IAqEXU,MAAOkG,IAET,kBAAC+C,EAAD,CAAmB/C,gBAAiBA,OAO9C,SAAS+C,EAAmBjL,GAAQ,IAC1BkI,EAAoBlI,EAApBkI,gBACAhJ,EAAQgD,IAARhD,IAFyB,EAGW6D,mBAAS,GAHpB,mBAG1BmI,EAH0B,KAGVC,EAHU,KAsBjC,OAhBAzH,qBAAU,WACR,IAAI0H,EAYJ,OATAlD,GACEhJ,EAAIyE,MAAM0H,OAAOtC,QAAQb,GAAiB,SAAAoD,GACxCH,EAAkBG,EAAQC,KAAKC,KAAKC,cAEnC7K,MAAK,SAAAoC,GACJoI,EAAcpI,KAEfkC,MAAM1G,QAAQqD,OAEZ,kBAAMuJ,GAAeA,OAC3B,CAAClM,EAAKgJ,IAEFA,EACL,kBAACwD,EAAA,EAAD,CAAOC,SAAS,QACd,kBAACC,EAAA,EAAD,CAAMpK,KAAK,QAAQmB,MAAM,UACxBuI,GAED,KAGS,SAASW,EAAiB7L,GAAQ,IAAD,EACrBkC,IAAjBhD,EADsC,EACtCA,IACR,OAF8C,EACjCF,QACE8J,UAAY5J,EAAIyE,MAAQ,kBAACqE,EAAShI,GAAY,K,sBCzLhD,SAASgI,GAAMhI,GAAQ,IAAD,EACVkC,IAAjBhD,EAD2B,EAC3BA,IAAKF,EADsB,EACtBA,QACP8M,EAAW9M,EAAQ8J,WAFU,EAGH/F,mBAAS,IAHN,mBAG5BgJ,EAH4B,KAGlBC,EAHkB,KAsBnC,OAjBAtI,qBAAU,WACR,IAAMuI,EAAYjN,EAAQ8J,WAAWzH,KAAI,SAAA0H,GAAO,OAAIA,EAAQzH,WACxD4K,EAAiB,KAYrB,OAVAhN,EAAIyE,MAAM0H,OAAOtC,QACdoD,MAAMF,GAAW,SAAAF,GAChB,IAAMK,EAAcH,EAAUzO,QAAO,SAAC6O,EAAK/K,EAASgL,GAAf,mBAAC,eACjCD,GADgC,kBAC1B/K,EAAUyK,EAASO,GAAOf,KAAKC,KAAKC,cAC3C,IACJO,EAAYI,MACXxL,MAAK,SAAAoC,GACNkJ,EAAiBlJ,KAChBkC,MAAM1G,QAAQqD,OAEZ,kBAAMqK,GAAkBA,OAC9B,CAAChN,EAAKF,EAASgN,IAGhB,kBAACO,EAAA,EAAKC,OAAN,KACE,wCACA,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,SAAO,EAAC1C,KAAK,SACzB,kBAACwC,EAAA,EAAMG,KAAP,KAAad,EAASzK,KAAI,SAAA0H,GAAO,OAC/B,kBAAC0D,EAAA,EAAMI,IAAP,CAAW1M,IAAK4I,EAAQzH,SACtB,kBAACmL,EAAA,EAAMK,KAAP,CAAYC,MAAO,EAAGC,UAAU,SAASjE,EAAQxH,KAAKC,MACtD,kBAACiL,EAAA,EAAMK,KAAP,CAAYC,MAAO,IACjB,0BAAMnK,MAAO,CAAEqK,QAAS,eAAgBC,SAAU,SAC/CnE,EAAQzH,SAEX,kBAAC,kBAAD,CAAiBiH,KAAMQ,EAAQzH,SAC7B,kBAAC4F,EAAA,EAAD,CACEC,OAAK,EACL6D,UAAQ,EACRmC,SAAO,EACPlD,KAAK,OACLtH,MAAM,OACN6F,KAAK,mBAIX,kBAACiE,EAAA,EAAMK,KAAP,CAAYC,MAAO,GACjBhB,GAAYA,EAAShD,EAAQzH,UAC7ByK,EAAShD,EAAQzH,iBC/ChB,SAAS0G,GAAMhI,GAAQ,IAC5Bd,EAAQgD,IAARhD,IAD2B,EAEP6D,mBAAS,IAFF,mBAE5BqK,EAF4B,KAEpBC,EAFoB,KAI7BC,EAAYpO,EAAIqO,OAAOnE,MAAMoE,kBA4BnC,OA1BA9J,qBAAU,WACR,IAAIwI,EAAiB,KAsBrB,OApBAoB,EAAS,uCAAC,WAAMG,GAAN,eAAAzM,EAAA,sEAEY9B,EAAIZ,IAAI+M,OAAOjC,QAF3B,OAEFA,EAFE,OAIJqE,EAAOC,QACTL,GAAU,SAAAM,GAAS,4BACdA,GADc,CAEjB,CACEvE,MAAM,GAAD,OAAKA,GACVsE,OAAO,GAAD,OAAKD,EAAOC,QAClBE,KAAK,GAAD,OAAKH,EAAOG,YAVd,2CAAD,uDAeNhN,MAAK,SAAAoC,GACJkJ,EAAiBlJ,KAElBkC,MAAM1G,QAAQqD,OAEV,kBAAMqK,GAAkBA,OAC9B,CAAChN,EAAKoO,IAGP,kBAACf,EAAA,EAAKC,OAAN,KACE,6CACA,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,SAAO,EAAC1C,KAAK,SACzB,kBAACwC,EAAA,EAAMoB,OAAP,KACE,kBAACpB,EAAA,EAAMI,IAAP,KACE,kBAACJ,EAAA,EAAMqB,WAAP,cACA,kBAACrB,EAAA,EAAMqB,WAAP,qBACA,kBAACrB,EAAA,EAAMqB,WAAP,qBAGJ,kBAACrB,EAAA,EAAMG,KAAP,KAAaQ,EAAO/L,KAAI,SAAC0M,EAAOC,GAAR,OACtB,kBAACvB,EAAA,EAAMI,IAAP,CAAW1M,IAAK6N,GACd,kBAACvB,EAAA,EAAMK,KAAP,CAAYC,MAAO,EAAGC,UAAU,QAC9B,kBAACtB,EAAA,EAAD,CAAOuC,QAAM,EAACrL,MAAO,CAAED,MAAO,MAAOuL,WAAY,OAAQC,cAAe,cAAgBJ,EAAM3E,QAEhG,kBAACqD,EAAA,EAAMK,KAAP,CAAYC,MAAO,GACjB,0BAAMnK,MAAO,CAAEqK,QAAS,eAAgBC,SAAU,OAAQgB,WAAY,SAAtE,IACIH,EAAML,SAGZ,kBAACjB,EAAA,EAAMK,KAAP,CAAYC,MAAO,GAAInK,MAAO,CAAED,MAAO,QAASuL,WAAY,SAAWH,EAAMH,a,0BCpDzF,SAAS5F,GAAMhI,GAAQ,IACbd,EAAQgD,IAARhD,IACAkP,EAAcpO,EAAdoO,UAFY,EAGkBrL,mBAAS,GAH3B,mBAGbsL,EAHa,KAGAC,EAHA,OAI4BvL,mBAAS,GAJrC,mBAIbwL,EAJa,KAIKC,EAJL,KAMdC,EAAaL,EACflP,EAAIqO,OAAOnE,MAAMsF,oBACjBxP,EAAIqO,OAAOnE,MAAMqF,WAErB/K,qBAAU,WACR,IAAIwI,EAAiB,KAWrB,OATAuC,GAAW,SAAAf,GACTY,EAAeZ,EAAOiB,YACtBH,EAAoB,MAEnB5N,MAAK,SAAAoC,GACJkJ,EAAiBlJ,KAElBkC,MAAM1G,QAAQqD,OAEV,kBAAMqK,GAAkBA,OAC9B,CAACuC,IAEJ,IAAMG,EAAQ,WACZJ,GAAoB,SAAAK,GAAI,OAAIA,EAAO,MAQrC,OALAnL,qBAAU,WACR,IAAMoL,EAAKC,YAAYH,EAAO,KAC9B,OAAO,kBAAMI,cAAcF,MAC1B,IAGD,kBAACvC,EAAA,EAAKC,OAAN,KACE,kBAACyC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,QAAN,CAAclC,UAAU,UACtB,kBAACmC,GAAA,EAAD,CACE1M,OAAQ2L,EAAY,YAAc,WAAa,SAC/CpM,MAAOqM,KAGX,kBAACY,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAACxD,EAAA,EAAD,CAAMpK,KAAK,SADb,IACwB+M,KAOjB,SAASc,GAAarP,GAAQ,IACnCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIqO,QACTrO,EAAIqO,OAAOnE,OACXlK,EAAIqO,OAAOnE,MAAMqF,YACjBvP,EAAIqO,OAAOnE,MAAMsF,oBACf,kBAAC,GAAS1O,GACR,K,qCC1DR,SAASgI,GAAMhI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEQ6D,mBAAS,MAFjB,mBAEbyB,EAFa,KAEL9B,EAFK,OAGYK,mBAAS,CAAEwI,KAAM,KAAM+D,QAAS,OAH5C,mBAGHC,GAHG,aAIgBxM,mBAAS,MAJzB,mBAIbyM,EAJa,KAIDC,EAJC,OAKgB1M,mBAAS,eALzB,mBAKb2M,EALa,KAKDC,EALC,OAMkB5M,mBAAS,IAN3B,mBAMb6M,EANa,KAMAC,EANA,OAOkB9M,mBAAS,IAP3B,6BASpBW,qBAAU,YACS,uCAAG,4BAAA1C,EAAA,+EAEG9B,EAAIZ,IAAIgB,MAAMwQ,cAFjB,OAEVvE,EAFU,OAGhBgE,EAAY,CAAEhE,OAAM+D,QAAS/D,EAAK+D,UAHlB,gDAKhB9Q,QAAQqD,MAAR,MALgB,yDAAH,qDAQjBiO,KACC,CAAC5Q,EAAIZ,IAAIgB,QAEZ,IAAMyQ,EAAc,uCAAG,WAAO1B,GAAP,eAAArN,EAAA,sEACD9B,EAAIZ,IAAI+M,OAAOjC,QADd,cACfA,EADe,gBAEflK,EAAIZ,IAAI8K,MAAM4G,aAAa3B,GAAazN,KAAxC,+BAAAI,EAAA,MAA6C,WAAMiP,GAAN,SAAAjP,EAAA,sEAC3C9B,EAAIZ,IAAI8K,MAAM8G,UAAUD,GAAWrP,KAAnC,+BAAAI,EAAA,MAAwC,WAAMmP,GAAN,iBAAAnP,EAAA,6DAI5C0B,EAAU,KAAD,OAAM0G,EAAN,6BAAgC+G,EAAiBzC,OAAjD,qBAAoEyC,EAAiBvC,OAJlD,SAKlB1O,EAAIZ,IAAI8K,MAAMgH,SAASD,EAAiBvC,MALtB,cAKtCyC,EALsC,gBAMnBnR,EAAIyE,MAAM0H,OAAOiF,SANE,OAMtCC,EANsC,OAO5CF,EAAYtC,MAAMyC,WAAWtQ,SAAQ,WAAwDoM,GAAU,EAA/DmE,SAAgE,IAAtDlP,EAAqD,EAArDA,KAAqD,IAA/CmP,OAAUC,EAAqC,EAArCA,KAAMD,EAA+B,EAA/BA,OAAQE,EAAuB,EAAvBA,QAGxEN,EAASC,EACZM,QAAO,gBAAGC,EAAH,EAAGA,MAAH,OACNA,EAAMC,kBACRD,EAAME,iBAAiBC,GAAG3E,MAEzBjL,KAAI,gBAAG6P,EAAH,EAAGA,MAAH,gBAAkBA,EAAMN,QAAxB,YAAmCM,EAAMR,WAC5CS,EAAc,KAElBA,GAAW,UAAOP,EAAP,YAAkBF,EAAlB,cAA8BJ,EAAOc,KAAK,OAAS,aAE9DD,GAAe,KAGfA,GAAW,UAAOP,EAAP,YAAkBF,EAAlB,YAA4BC,EAAKtP,KAAI,SAACL,GAAD,OAAOA,EAAE8C,cAAYsN,KAAK,MAA/D,KAEXD,GAAe,KAEfA,GAAe5P,EAAK8P,cAAchQ,KAAI,SAACiQ,GAAD,OAAOA,EAAExN,cAAYsN,KAAK,MAChE3B,EAAc0B,GACdtB,EAAe,OA7B2B,2CAAxC,uDAD2C,2CAA7C,uDAiCH3K,OAAM,SAACwB,GACRlI,QAAQC,IAAI,UAAWiI,EAAE6K,SACzB7O,EAAU,UAAD,OAAWgE,EAAE6K,aArCH,2CAAH,sDAyCdC,EAAY,uCAAG,WAAOvB,GAAP,eAAAjP,EAAA,sEACC9B,EAAIZ,IAAI+M,OAAOjC,QADhB,cACbA,EADa,gBAEblK,EAAIZ,IAAI8K,MAAMgH,SAASH,GAAWrP,KAAlC,+BAAAI,EAAA,MAAuC,WAAMyQ,GAAN,mBAAAzQ,EAAA,6DACrC0Q,EAAcD,EAAWE,IAAI,SAASA,IAAI,UAChDjP,EAAU,KAAD,OAAM0G,EAAN,6BAAgCsI,EAAYhE,OAA5C,qBAA+DgE,EAAY9D,OAFzC,SAKjB1O,EAAIZ,IAAI8K,MAAMgH,SAASsB,EAAY9D,MALlB,cAKrCyC,EALqC,gBAMlBnR,EAAIyE,MAAM0H,OAAOiF,SANC,OAMrCC,EANqC,OAO3CF,EAAYtC,MAAMyC,WAAWtQ,SAAQ,WAAwDoM,GAAU,EAA/DmE,SAAgE,IAAtDlP,EAAqD,EAArDA,KAAqD,IAA/CmP,OAAUC,EAAqC,EAArCA,KAAMD,EAA+B,EAA/BA,OAAQE,EAAuB,EAAvBA,QAGxEN,EAASC,EACZM,QAAO,gBAAGC,EAAH,EAAGA,MAAH,OACNA,EAAMC,kBACRD,EAAME,iBAAiBC,GAAG3E,MAEzBjL,KAAI,gBAAG6P,EAAH,EAAGA,MAAH,gBAAkBA,EAAMN,QAAxB,YAAmCM,EAAMR,WAC5CS,EAAc,KAClBA,GAAW,UAAOP,EAAP,YAAkBF,EAAlB,cAA8BJ,EAAOc,KAAK,OAAS,aAI9DD,GAAW,UAAOP,EAAP,YAAkBF,EAAlB,YAA4BC,EAAKtP,KAAI,SAACL,GAAD,OAAOA,EAAE8C,cAAYsN,KAAK,MAA/D,KAGXD,GAAe,KACfA,GAAe5P,EAAK8P,cAAchQ,KAAI,SAACiQ,GAAD,OAAOA,EAAExN,cAAYsN,KAAK,MAEhE3B,EAAc0B,GACdtB,EAAe,OA5B0B,2CAAvC,uDA8BH3K,OAAM,SAACwB,GACRlI,QAAQC,IAAI,UAAWiI,EAAE6K,SACzB7O,EAAU,UAAD,OAAWgE,EAAE6K,aAlCL,2CAAH,sDAsCZK,EAAqB,SAACC,EAAItG,GAC9BoE,EAAcpE,EAAKvJ,OACnB6N,EAAe,KAKXiC,EAAsB,SAACD,EAAItG,GAC/BsE,EAAetE,EAAKvJ,QAKhBuF,EAAa,CAAC,CAClB/F,KAAM,YACNhC,KAAM,iBACNiI,UAAU,GACT,CACDjG,KAAM,YACNhC,KAAM,eACNiI,UAAU,IAGZ,OACE,kBAAC8E,EAAA,EAAKC,OAAN,CAAaO,MAAO,IAClB,kBAACgF,GAAA,EAAD,KACE,wEACA,kBAAC9C,GAAA,EAAD,CAAMrM,MAAO,CAAEmK,MAAO,SACpB,kBAACkC,GAAA,EAAKC,QAAN,KACE,kBAACD,GAAA,EAAK+C,KAAN,KACE,kBAACD,GAAA,EAAKpK,MAAN,CAAY/E,MAAO,CAAEqP,UAAW,QAAUC,QAAM,GAC9C,yCACA,kBAACH,GAAA,EAAKI,MAAN,CACE1P,MAAM,kBACNjB,KAAK,aACLQ,MAAM,cACNoQ,QAAwB,gBAAf1C,EACThF,SAAUkH,IAEZ,kBAACG,GAAA,EAAKI,MAAN,CACE1P,MAAM,gBACNjB,KAAK,aACLQ,MAAM,YACNoQ,QAAwB,cAAf1C,EACThF,SAAUkH,KAGd,kBAACG,GAAA,EAAKpK,MAAN,KACkB,gBAAf+H,EACG,kBAACqC,GAAA,EAAKM,MAAN,CAAYlS,IAAG,UAAKoH,EAAW,GAAG/F,KAAnB,YAA2B+F,EAAW,GAAG/H,OACxD,kBAAC8S,GAAA,EAAD,CACE1P,MAAO,CAAEsK,SAAU,SACnB1C,YAAajD,EAAW,GAAG/H,KAC3B+S,OAAK,EACL/S,KAAK,OACLkL,SAAUoH,EACVxS,MAAM,cACN0C,MAAO4N,KAGT,kBAACmC,GAAA,EAAKM,MAAN,CAAYlS,IAAG,UAAKoH,EAAW,GAAG/F,KAAnB,YAA2B+F,EAAW,GAAG/H,OACxD,kBAAC8S,GAAA,EAAD,CACE1P,MAAO,CAAEsK,SAAU,SACnB1C,YAAajD,EAAW,GAAG/H,KAC3B+S,OAAK,EACL/S,KAAK,OACLkL,SAAUoH,EACVxS,MAAM,cACN0C,MAAO4N,QAOnB,kBAACX,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAACoD,GAAA,EAAD,CAAOC,QAAS,kBAACvL,EAAA,EAAD,CAAQpE,SAAU8M,EAAYvI,QAAU,EAAGD,QAAU,iBAAqB,gBAAfsI,EAA+BK,EAAeH,GAAe4B,EAAa5B,KAArI,iBACd,kBAAC4C,GAAA,EAAM3E,OAAP,yBAA+B,6BAAK,+BAAQrJ,IAC5C,kBAACgO,GAAA,EAAMtD,QAAP,CAAewD,WAAS,GACtB,kBAACF,GAAA,EAAMG,YAAP,KACE,6BACE,0BAAM/P,MAAO,CAAEgQ,aAAc,eAAiBpD,SAO1D,yBAAK5M,MAAO,CAAEgQ,aAAc,eAAiBpO,KAMtC,SAASqO,GAAa7S,GAAQ,IACnCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIZ,KAAOY,EAAIyE,MACpB,kBAAC,GAAS3D,GACR,K,eCrMA8S,GAAkB,CACtB,yDACA,0DAGF,SAAS9K,GAAMhI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEc6D,mBAAS,IAFvB,mBAEbgQ,EAFa,KAEFC,EAFE,KAIpBtP,qBAAU,WACR,IAAIV,EAAQ,KAgCZ,OA/Be,uCAAG,sBAAAhC,EAAA,sEACF9B,EAAIyE,MAAM0H,OAAOiF,QAAO,SAAAA,GAEpCA,EAAOpQ,SAAQ,SAAA+S,GAAU,IAEf/B,EAAiB+B,EAAjB/B,MAAOJ,EAAUmC,EAAVnC,MACThS,EAAQoS,EAAMgC,QAGdC,EAAS,UAAMjC,EAAMN,QAAZ,YACbM,EAAMR,OADO,qBAEFI,EAAMhN,WAFJ,KAIf,IAAIgP,GAAgBM,SAASD,GAA7B,CAGA,IAAMhN,EAAS+K,EAAM3F,KAAKlK,KACxB,SAACkK,EAAMe,GAAP,gBAAoBxN,EAAMwN,GAAO9M,KAAjC,aAA0C+L,EAAKzH,eAGjDkP,GAAa,SAAAtM,GAAC,OAAK,CACjB8B,KAAM,OACN6K,QAAQ,GAAD,OAAKF,EAAL,YAAkBzM,EAAEW,QAC3BiM,UAAWpC,EAAM3P,KAAK8P,cAAcD,KAAK,MAAMtN,WAC/CyP,QAASpN,EAAOiL,KAAK,QAJT,mBAKR1K,cAzBM,OAChB1D,EADgB,kDAAH,oDA8BfwQ,GACO,kBAAMxQ,GAASA,OACrB,CAAC9D,EAAIyE,MAAM0H,SAtCM,MAwCYrL,EAAxByT,qBAxCY,MAwCI,IAxCJ,EA0CpB,OACE,kBAAClH,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,wBAAInK,MAAO,CAAE8Q,MAAO,SAApB,UACA,kBAACxM,EAAA,EAAD,CACEC,OAAK,EAAC6D,UAAQ,EACdf,KAAK,OACLtH,MAAM,OACNgR,QAAQ,QACRnL,KAAK,QACLpB,QAAU,SAAAuD,GAAC,OAAIqI,EAAa,OAE9B,kBAACY,GAAA,EAAD,CAAMhR,MAAO,CAAEiR,MAAO,OAAQC,SAAU,OAAQC,UAAWN,GAAiBnD,OAAQyC,KAK3E,SAASiB,GAAQhU,GAAQ,IAC9Bd,EAAQgD,IAARhD,IACR,OAAOA,EAAIyE,OAASzE,EAAIyE,MAAM0H,QAAUnM,EAAIyE,MAAM0H,OAAOiF,OACvD,kBAAC,GAAStQ,GACR,KCnEN,IAAMiU,GAAgB,SAACC,GAAD,OACpBA,EAAI1U,KAAKsE,WAAWqQ,WAAW,YAEjC,SAASnM,GAAMhI,GAAQ,IAAD,EACKkC,IAAjBhD,EADY,EACZA,IAAKN,EADO,EACPA,QACL4D,EAAgBxC,EAAhBwC,YAFY,EAGQO,mBAAS,MAHjB,mBAGbyB,EAHa,KAGL9B,EAHK,OAKgBK,mBAAS,aALzB,mBAKbqR,EALa,KAKDC,EALC,OAMgBtR,mBAAS,IANzB,mBAMbuR,EANa,KAMDC,EANC,OAOcxR,mBAAS,IAPvB,mBAObyR,EAPa,KAOFC,EAPE,OAQkB1R,mBAAS,IAR3B,mBAQbQ,EARa,KAQAmR,EARA,KAUdC,EAAgB,CACpBvR,UAAW,GACXC,SAAU,GACVC,YAAa,IAbK,EAgBcP,mBAAS4R,GAhBvB,mBAgBbC,EAhBa,KAgBFC,EAhBE,KAiBZzR,EAAqCwR,EAArCxR,UAAWC,EAA0BuR,EAA1BvR,SAAUC,EAAgBsR,EAAhBtR,YAEvBwR,EAAa,SAAC5V,EAAKkV,GACvB,MAAmB,UAAfA,EACKlV,EAAIyE,MACa,cAAfyQ,EACFlV,EAAI8F,GACa,QAAfoP,EACFlV,EAAIZ,IAEJY,EAAI2G,QAgFfnC,qBA5EyB,WACvB,GAAKxE,EAAL,CACA,IAAM6V,EAAUD,EAAW5V,EAAKkV,GAC1BE,EAAaU,OAAOC,KAAKF,GAASG,OACrCrE,QAAO,SAAAsE,GAAE,OAAIH,OAAOC,KAAKF,EAAQI,IAAK9N,OAAS,KAC/ChG,KAAI,SAAA8T,GAAE,MAAK,CAAEhV,IAAKgV,EAAInT,MAAOmT,EAAI5M,KAAM4M,MAC1CZ,EAAcD,MAsEY,CAACpV,EAAKkV,IAClC1Q,qBApEwB,WACtB,GAAKxE,GAAqB,KAAdkE,EAAZ,CACA,IAAMoR,EAAYQ,OAAOC,KAAKH,EAAW5V,EAAKkV,GAAYhR,IAAY8R,OACnE7T,KAAI,SAAA+T,GAAC,MAAK,CAAEjV,IAAKiV,EAAGpT,MAAOoT,EAAG7M,KAAM6M,MACvCX,EAAaD,MAgEY,CAACtV,EAAKkV,EAAYhR,IAC7CM,qBA9D0B,WACxB,GAAKxE,GAAqB,KAAdkE,GAAiC,KAAbC,EAAhC,CAKA,IAAIE,EAAc,GAElB,GAAmB,UAAf6Q,EAAwB,CAC1B,IAAMiB,EAAWnW,EAAIyE,MAAMP,GAAWC,GAAU9B,KAAK/B,KACjD6V,EAASC,UAEFD,EAASE,MAClBhS,EAAc,CAAC,CACb/B,KAAM6T,EAASG,MAAMrV,IAAI2D,WACzBtE,KAAM6V,EAASG,MAAMrV,IAAI2D,WACzB2D,UAAU,IAEH4N,EAASI,cAClBlS,EAAc,CAAC,CACb/B,KAAM6T,EAASK,YAAYC,KAAK7R,WAChCtE,KAAM6V,EAASK,YAAYC,KAAK7R,WAChC2D,UAAU,GACT,CACDjG,KAAM6T,EAASK,YAAYE,KAAK9R,WAChCtE,KAAM6V,EAASK,YAAYE,KAAK9R,WAChC2D,UAAU,WAGT,GAAmB,cAAf2M,EAA4B,CACrC,IAAMyB,EAAW3W,EAAI8F,GAAG5B,GAAWC,GAAU9B,KAAKoP,KAE9CkF,GAAYA,EAASxO,OAAS,IAChC9D,EAAcsS,EAASxU,KAAI,SAAA6S,GAAG,MAAK,CACjC1S,KAAM0S,EAAI1S,KAAKsC,WACftE,KAAM0U,EAAI1U,KAAKsE,WACf2D,SAAUwM,GAAcC,aAGvB,GAAmB,QAAfE,EAAsB,CAC/B,IAAI0B,EAAY,GAEZlX,EAAQwE,IAAcxE,EAAQwE,GAAWC,KAC3CyS,EAAYlX,EAAQwE,GAAWC,GAAU8C,QAGvC2P,EAAUzO,OAAS,IACrB9D,EAAcuS,EAAUzU,KAAI,SAAA6S,GAAG,MAAK,CAClC1S,KAAM0S,EAAI1S,KACVhC,KAAM0U,EAAI1U,KACViI,SAAUyM,EAAI6B,aAAc,WAGR,aAAf3B,IACT7Q,EAAc,IAGhBmR,EAAenR,QAvDbmR,EAAe,MA4DU,CAACxV,EAAKkV,EAAYhR,EAAWC,IAE1D,IAAM2S,EAA8B,SAACrL,EAAGY,GACtCsJ,GAAa,SAAAD,GACX,IAAIqB,EACI3W,EAAiBiM,EAAjBjM,MAAO0C,EAAUuJ,EAAVvJ,MACf,GAAqB,kBAAV1C,EAAoB,KAErB+G,EAA8B/G,EAA9B+G,IAAmB7G,EAAWF,EAAzBiI,WAAc/H,KACrB8D,EAAW,YAAOsR,EAAUtR,aAClCA,EAAY+C,GAAO,CAAE7G,OAAMwC,SAC3BiU,EAAG,2BAAQrB,GAAR,IAAmBtR,qBACjB,GAAc,cAAVhE,EAAuB,CAAC,IAAD,EAChC2W,EAAG,2BAAQrB,GAAR,uBAAoBtV,EAAQ0C,GAA5B,yBAA6C,IAA7C,4BAA8D,IAA9D,SACE,GAAc,aAAV1C,EAAsB,CAAC,IAAD,EAC/B2W,EAAG,2BAAQrB,GAAR,uBAAoBtV,EAAQ0C,GAA5B,4BAAgD,IAAhD,IAEL,OAAOiU,MAILC,EAAqB,SAACrE,EAAItG,GAC9B8I,EAAc9I,EAAKvJ,OAEnB6S,EAAaF,IAGTwB,EAAiB,SAAC/B,GAAD,MACN,QAAfA,EACI,qBACA,wDAEN,OACE,kBAAC7H,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,iDACA,kBAACgF,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKpK,MAAN,CAAY/E,MAAO,CAAEqP,UAAW,QAAUC,QAAM,GAC9C,mDACA,kBAACH,GAAA,EAAKI,MAAN,CACE1P,MAAM,YACNjB,KAAK,aACLQ,MAAM,YACNoQ,QAAwB,cAAfgC,EACT1J,SAAUwL,IAEZ,kBAACnE,GAAA,EAAKI,MAAN,CACE1P,MAAM,QACNjB,KAAK,aACLQ,MAAM,QACNoQ,QAAwB,UAAfgC,EACT1J,SAAUwL,IAEZ,kBAACnE,GAAA,EAAKI,MAAN,CACE1P,MAAM,MACNjB,KAAK,aACLQ,MAAM,MACNoQ,QAAwB,QAAfgC,EACT1J,SAAUwL,IAEZ,kBAACnE,GAAA,EAAKI,MAAN,CACE1P,MAAM,WACNjB,KAAK,aACLQ,MAAM,WACNoQ,QAAwB,aAAfgC,EACT1J,SAAUwL,KAGd,kBAACnE,GAAA,EAAKM,MAAN,KACE,kBAAChI,EAAA,EAAD,CACEG,YAAY,gBACZ+H,OAAK,EACL9P,MAAM,eACNiI,SAAUsL,EACV3X,QAAM,EACNiM,WAAS,EACThL,MAAM,YACN0C,MAAOoB,EACPqH,QAAS6J,KAGb,kBAACvC,GAAA,EAAKM,MAAN,KACE,kBAAChI,EAAA,EAAD,CACEG,YAAY,YACZ+H,OAAK,EACL9P,MAAM,WACNiI,SAAUsL,EACV3X,QAAM,EACNiM,WAAS,EACThL,MAAM,WACN0C,MAAOqB,EACPoH,QAAS+J,KAGZjR,EAAYlC,KAAI,SAACkG,EAAYlB,GAAb,OACf,kBAAC0L,GAAA,EAAKM,MAAN,CAAYlS,IAAG,UAAKoH,EAAW/F,KAAhB,YAAwB+F,EAAW/H,OAChD,kBAAC8S,GAAA,EAAD,CACE9H,YAAajD,EAAW/H,KACxB+S,OAAK,EACL/S,KAAK,OACLiD,MAAO8E,EAAW/F,KAClBlC,MAAO,CAAE+G,MAAKkB,cACdvF,MAAQsB,EAAY+C,GAAO/C,EAAY+C,GAAKrE,MAAQ,GACpD0I,SAAUsL,IAEVzO,EAAWE,SACT,kBAACiE,EAAA,EAAD,CACAvE,OAAK,EACLwE,UAAQ,EACRhJ,MAAM,OACN4Q,QAAY4C,EAAe/B,KAE3B,SAIR,kBAACrC,GAAA,EAAKM,MAAN,CAAYzP,MAAO,CAAEoK,UAAW,WAC9B,kBAACoJ,GAAD,CACE5T,YAAaA,EACbE,UAAWA,EACXG,MAAO,CAAEuR,aAAYhR,YAAWC,WAAUC,cAAaC,kBAG3D,yBAAKX,MAAO,CAAEgQ,aAAc,eAAiBpO,KAMrD,SAAS4R,GAAkBpW,GAAQ,IAChBoU,EAAiBpU,EAA1B6C,MAASuR,WACjB,MAAmB,UAAfA,EACK,kBAAC7R,EAAD,eACLE,MAAQ,QACRjD,KAAO,QACPmD,MAAQ,QACJ3C,IAEkB,cAAfoU,EACF,kBAAC1M,EAAkB1H,GACF,QAAfoU,GAAuC,aAAfA,EAC1B,kBAAC7R,EAAD,eACLE,MAAQ,SACRjD,KAAQ4U,EACRzR,MAAQ,QACJ3C,SALD,EAUM,SAASqW,GAAYrW,GAElC,OADgBkC,IAARhD,IACG8F,GAAK,kBAAC,GAAShF,GAAY,KCxQxC,SAASgI,GAAMhI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEY6D,mBAAS,CAAEwI,KAAM,KAAM+D,QAAS,OAF5C,mBAEbgH,EAFa,KAEH/G,EAFG,KAgBpB,OAZA7L,qBAAU,YACS,uCAAG,4BAAA1C,EAAA,+EAEG9B,EAAIZ,IAAIgB,MAAMwQ,cAFjB,OAEVvE,EAFU,OAGhBgE,EAAY,CAAEhE,OAAM+D,QAAS/D,EAAK+D,UAHlB,gDAKhB9Q,QAAQqD,MAAR,MALgB,yDAAH,qDAQjBiO,KACC,CAAC5Q,EAAIZ,IAAIgB,QAGV,kBAACiN,EAAA,EAAKC,OAAN,KACE,kBAACyC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,QAAN,KACE,kBAACD,GAAA,EAAKpB,OAAN,iBACA,kBAACoB,GAAA,EAAK+C,KAAN,KACE,kCAAQsE,EAAShH,WAGrB,kBAACL,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAACoD,GAAA,EAAD,CAAOC,QAAS,kBAACvL,EAAA,EAAD,uBACd,kBAACsL,GAAA,EAAM3E,OAAP,yBACA,kBAAC2E,GAAA,EAAMtD,QAAP,CAAewD,WAAS,GACtB,kBAACF,GAAA,EAAMG,YAAP,KACE,6BACE,8BAAO4D,KAAKC,UAAUF,EAAS/K,KAAM,KAAM,WAW9C,SAASkL,GAAUzW,GAAQ,IAChCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIZ,KAAOY,EAAIZ,IAAIgB,OAASJ,EAAIZ,IAAIgB,MAAMwQ,YAC/C,kBAAC,GAAS9P,GACR,KC9CN,SAASgI,GAAMhI,GAAQ,IACbd,EAAQgD,IAARhD,IADY,EAEY6D,mBAAS,IAFrB,mBAEb2T,EAFa,KAEHC,EAFG,KAoBpB,OAhBAjT,qBAAU,YACK,uCAAG,oCAAA1C,EAAA,+EAEiC4V,QAAQC,IAAI,CACvD3X,EAAIZ,IAAI+M,OAAOjC,QACflK,EAAIZ,IAAI+M,OAAO7J,OACftC,EAAIZ,IAAI+M,OAAOiE,YALL,mCAELlG,EAFK,KAEE0N,EAFF,KAEYC,EAFZ,KAOZJ,EAAY,CAAEvN,QAAO0N,WAAUC,gBAPnB,kDASZvY,QAAQqD,MAAR,MATY,0DAAH,qDAYbmV,KACC,CAAC9X,EAAIZ,IAAI+M,SAGV,kBAACkB,EAAA,EAAKC,OAAN,KACE,kBAACyC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKC,QAAN,KACE,kBAACD,GAAA,EAAKpB,OAAN,KAAc6I,EAASI,UACvB,kBAAC7H,GAAA,EAAK+C,KAAN,KACE,8BAAO0E,EAAStN,QAElB,kBAAC6F,GAAA,EAAK0D,YAAN,uBACkB,IAChB,uBAAG5H,KAAK,0DAAR,gCAFF,6BAOF,kBAACkE,GAAA,EAAKC,QAAN,CAAcE,OAAK,GACjB,kBAACxD,EAAA,EAAD,CAAMpK,KAAK,YADb,IAC2BkV,EAASK,eAO7B,SAASE,GAAUjX,GAAQ,IAChCd,EAAQgD,IAARhD,IACR,OAAOA,EAAIZ,KACTY,EAAIZ,IAAI+M,QACRnM,EAAIZ,IAAI+M,OAAOjC,OACflK,EAAIZ,IAAI+M,OAAO7J,MACftC,EAAIZ,IAAI+M,OAAOiE,QACb,kBAAC,GAAStP,GACR,KClDR,SAASgI,GAAMhI,GAAQ,IACbd,EAAQgD,IAARhD,IACAsD,EAAgBxC,EAAhBwC,YAFY,EAKQO,mBAAS,IALjB,mBAKbyB,EALa,KAKL9B,EALK,OAQoBK,mBAAS,GAR7B,mBAQbmU,EARa,KAQCC,EARD,OAScpU,mBAAS,GATvB,mBASbqU,EATa,KASFC,EATE,KA8BpB,OAnBA3T,qBAAU,WACR,IAAI0H,EAeJ,OAdAlM,EAAIyE,MAAM2T,eAAeC,WAAU,SAAAC,GAI7BA,EAAS9R,OACXyR,EAAgB,UAEhBA,EAAgBK,EAASC,SAAS9I,eAEnC/N,MAAK,SAAAoC,GACNoI,EAAcpI,KAEbkC,MAAM1G,QAAQqD,OAEV,kBAAMuJ,GAAeA,OAC3B,CAAClM,EAAIyE,MAAM2T,iBAGZ,kBAAC/K,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,+CACA,kBAACkC,GAAA,EAAD,CAAMyI,UAAQ,GACZ,kBAACzI,GAAA,EAAKC,QAAN,CAAclC,UAAU,UACtB,kBAACmC,GAAA,EAAD,CACE1M,MAAM,gBACNT,MAAOkV,MAIb,kBAACnF,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKM,MAAN,KACE,kBAACC,GAAA,EAAD,CACE7P,MAAM,YACNnD,MAAM,WACNE,KAAK,SACLkL,SAAU,SAACC,EAAD,OAAM3I,EAAN,EAAMA,MAAN,OAAkBqV,EAAarV,OAG7C,kBAAC+P,GAAA,EAAKM,MAAN,CAAYzP,MAAO,CAAEoK,UAAW,WAC9B,kBAACzK,EAAD,CACEC,YAAaA,EACbC,MAAM,kBACNjD,KAAK,YACLkD,UAAWA,EACXG,MAAO,CACLO,UAAW,iBACXC,SAAU,cACVC,YAAa,CAAC8T,GACd7T,YAAa,EAAC,OAIpB,yBAAKX,MAAO,CAAEgQ,aAAc,eAAiBpO,KAMtC,SAASmT,GAAgB3X,GAAQ,IACtCd,EAAQgD,IAARhD,IACR,OAAQA,EAAIyE,MAAM2T,gBAAkBpY,EAAIyE,MAAM2T,eAAeC,UACzD,kBAAC,GAASvX,GAAY,KC3Eb,SAASgI,GAAMhI,GAAQ,IAAD,EACP+C,mBAAS,MADF,mBAC5ByB,EAD4B,KACpB9B,EADoB,OAEDK,mBAAS,CAAE6U,UAAW,KAAMC,OAAQ,IAFnC,mBAE5BjD,EAF4B,KAEjBC,EAFiB,KAG3BrS,EAAgBxC,EAAhBwC,YAEFkI,EAAW,SAACC,EAAGY,GAAJ,OACfsJ,GAAa,SAAAiD,GAAI,kCAAUA,GAAV,kBAAiBvM,EAAKjM,MAAQiM,EAAKvJ,YAE9C4V,EAAsBhD,EAAtBgD,UAAWC,EAAWjD,EAAXiD,OAEnB,OACE,kBAACtL,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,wCACA,kBAACgF,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKM,MAAN,KACE,kBAAC3G,EAAA,EAAD,CAAOvE,OAAK,EAACxE,MAAM,QACjB,kBAACiJ,EAAA,EAAD,CAAMpK,KAAK,qBADb,2BAKF,kBAACuQ,GAAA,EAAKM,MAAN,6EACA,kBAACN,GAAA,EAAKM,MAAN,KACE,kBAACC,GAAA,EAAD,CACEC,OAAK,EACL9P,MAAM,KACNjD,KAAK,OACLgL,YAAY,UACZlL,MAAM,YACNoL,SAAUA,KAGd,kBAACqH,GAAA,EAAKM,MAAN,KACE,kBAACC,GAAA,EAAD,CACEC,OAAK,EACL9P,MAAM,SACNjD,KAAK,SACLF,MAAM,SACNoL,SAAUA,KAGd,kBAACqH,GAAA,EAAKM,MAAN,CAAYzP,MAAO,CAAEoK,UAAW,WAC9B,kBAACzK,EAAD,CACEC,YAAaA,EACbC,MAAM,SACNjD,KAAK,YACLkD,UAAWA,EACXG,MAAO,CACLO,UAAW,WACXC,SAAU,WACVC,YAAa,CAACsU,EAAWC,GACzBtU,YAAa,EAAC,GAAM,OAI1B,yBAAKX,MAAO,CAAEgQ,aAAc,eAAiBpO,KCtDtC,SAASwD,GAAMhI,GAAQ,IAAD,EACP+C,mBAAS,IADF,mBAC5ByB,EAD4B,KACpB9B,EADoB,OAEHK,mBAAS,IAFN,mBAE5BgV,EAF4B,KAElBC,EAFkB,KAG3BxV,EAAgBxC,EAAhBwC,YAQFyV,EAAmB,SAAAC,GACvB,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,UAAY,SAAA3R,GACrB,IATgB4R,EASV/E,GATU+E,EASYH,EAAW1S,OARlC8S,MAAMC,KAAK,IAAIC,WAAWH,IAC9BjX,KAAI,SAAAqX,GAAC,OAAIA,EAAE5U,SAAS,IAAI6U,SAAS,EAAG,QACpCvH,KAAK,KAON4G,EAAY,KAAD,OAAMzE,KAGnB4E,EAAWS,kBAAkBV,IAG/B,OACE,kBAAC3L,EAAA,EAAKC,OAAN,CAAaO,MAAO,GAClB,+CACA,kBAACgF,GAAA,EAAD,KACE,kBAACA,GAAA,EAAKM,MAAN,KACE,kBAACC,GAAA,EAAD,CACE9S,KAAK,OACLsP,GAAG,OACHrM,MAAM,YACNoW,OAAO,QACPnO,SAAU,SAAAhE,GAAC,OAAIuR,EAAiBvR,EAAEmE,OAAOiO,MAAM,QAGnD,kBAAC/G,GAAA,EAAKM,MAAN,CAAYzP,MAAO,CAAEoK,UAAW,WAC9B,kBAACzK,EAAD,CACEC,YAAaA,EACbC,MAAM,UACNjD,KAAK,oBACLkD,UAAWA,EACXG,MAAO,CACLO,UAAW,SACXC,SAAU,UACVC,YAAa,CAACyU,GACdxU,YAAa,EAAC,OAIpB,yBAAKX,MAAO,CAAEgQ,aAAc,eAAiBpO,KChCrD,SAASwD,KAAS,IAaAnH,EAbD,EAC6BkC,mBAAS,MADtC,mBACRgW,EADQ,KACQ9Q,EADR,OAEuC/F,IAA9C9C,EAFO,EAEPA,SAAUJ,EAFH,EAEGA,QAASC,EAFZ,EAEYA,aAAcE,EAF1B,EAE0BA,SACnCqD,EACJuW,GACiB,UAAjB9Z,GACAD,EAAQga,QAAQD,GAEZE,EAAS,SAAA1Q,GAAI,OACjB,kBAAC2Q,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAQnP,KAAK,SAAS1B,KAa1B,GAAiB,UAAbnJ,EAAsB,OAVVyB,EAUyB1B,EATvC,kBAACoN,EAAA,EAAD,CAAMmL,UAAQ,EAAC2B,QAAS,EAAGC,QAAM,GAC/B,kBAAC/M,EAAA,EAAKC,OAAN,KACE,kBAAC+M,EAAA,EAAD,CAASC,UAAQ,EAACrM,SAAO,EAACsM,UAAQ,EAChChM,OAAO,gCACP8F,QAAO,UAAKgD,KAAKC,UAAU3V,EAAK,KAAM,QAMzC,GAAiB,UAAbzB,EAAsB,OAAO6Z,EAAO,2BAE7C,GAAqB,UAAjBha,EACF,OAAOga,EAAO,kEAGhB,IAAMS,EAAaC,sBAEnB,OACE,yBAAKC,IAAKF,GACR,kBAACG,EAAA,EAAD,CAAQC,QAASJ,GACf,kBAAC7N,EAAD,CAAiB5D,kBAAmBA,KAEtC,kBAAC6B,EAAA,EAAD,KACE,kBAACyC,EAAA,EAAD,CAAMwN,WAAS,EAACV,QAAQ,SACtB,kBAAC9M,EAAA,EAAKM,IAAN,CAAUmN,WAAS,GACjB,kBAAC/C,GAAD,MACA,kBAACR,GAAD,MACA,kBAACpH,GAAD,MACA,kBAACA,GAAD,CAAajB,WAAS,KAExB,kBAAC7B,EAAA,EAAKM,IAAN,KACE,kBAAC,GAAD,OAEF,kBAACN,EAAA,EAAKM,IAAN,CAAUmN,WAAS,GACjB,kBAAC,GAAD,OAEF,kBAACzN,EAAA,EAAKM,IAAN,CAAUmN,WAAS,GACjB,kBAAC,GAAD,OAEF,kBAACzN,EAAA,EAAKM,IAAN,KACE,kBAAC,GAAD,CAAUrK,YAAaA,IACvB,kBAAC,GAAD,CAASA,YAAaA,KAExB,kBAAC+J,EAAA,EAAKM,IAAN,KACE,kBAACwJ,GAAD,CAAY7T,YAAaA,IACzB,kBAACwR,GAAD,OAEF,kBAACzH,EAAA,EAAKM,IAAN,KACE,kBAAC8K,GAAD,CAAgBnV,YAAaA,OAInC,kBAACqF,EAAD,OAKS,SAASoS,KACtB,OACE,kBAAC,EAAD,KACE,kBAAC,GAAD,OC1FNC,IAASC,OAAO,kBAACF,GAAD,MACdG,SAASC,eAAe,W","file":"static/js/main.d67a455a.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\nlet loadAccts = false;\nconst loadAccounts = (state, dispatch) => {\n  const asyncLoadAccounts = async () => {\n    dispatch({ type: 'LOAD_KEYRING' });\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  };\n\n  const { keyringState } = state;\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\n  if (keyringState) return;\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  loadAccts = true;\n  asyncLoadAccounts();\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","const utils = {\n  paramConversion: {\n    num: [\n      'Compact<Balance>',\n      'BalanceOf',\n      'u8', 'u16', 'u32', 'u64', 'u128',\n      'i8', 'i16', 'i32', 'i64', 'i128'\n    ]\n  }\n};\n\nexport default utils;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) { return; }\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\n      : setStatus(`Current transaction status: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (unsub) {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Sending...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Unsigned'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Signed'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='SUDO'\n        type='SUDO-TX'\n        color='red'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useState, useEffect } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Menu,\n  Button,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n  const [chainSelected, setChainSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const chainOptions = [{\n    key: 'polkadot',\n    value: 'wss://rpc.polkadot.io',\n    text: 'Parity Polkadot',\n    icon: 'chain'\n  }, {\n    key: 'kusama',\n    value: 'wss://kusama-rpc.polkadot.io',\n    text: 'Kusama',\n    icon: 'chain'\n  }, {\n    key: 'substrate',\n    value: 'wss://dev-node.substrate.dev',\n    text: 'Substrate',\n    icon: 'code'\n  }, {\n    key: 'localnode',\n    value: 'ws://127.0.0.1:9944',\n    text: 'Local Node',\n    icon: 'code'\n  }];\n\n  const initialChain =\n    chainOptions.length > 0 ? chainOptions[0].value : '';\n\n  const setCurrentChain = (chain) => {\n    localStorage.setItem('currentChain', chain);\n  };\n\n  const getCurrentChain = () => {\n    return localStorage.getItem('currentChain');\n  };\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountAddress(initialAddress);\n    setAccountSelected(initialAddress);\n    if (!getCurrentChain) {\n      setChainSelected(initialChain);\n    } else {\n      setChainSelected(getCurrentChain);\n    }\n  }, [setAccountAddress, initialAddress, initialChain]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  const onChangeChain = chainurl => {\n    // Update state with new connected chain\n    setChainSelected(chainurl);\n    setCurrentChain(chainurl);\n    window.location.assign(`?rpc=${chainurl}`);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='left' style={{ alignItems: 'center', marginLeft: '6px' }}>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an chain'\n            options={chainOptions}\n            onChange={(_, dropdown) => {\n              onChangeChain(dropdown.value);\n            }}\n            value={chainSelected}\n          />\n        </Menu.Menu>\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\n          { !accountSelected\n            ? <span>\n              Add your account with the{' '}\n              <a\n                target='_blank'\n                rel='noopener noreferrer'\n                href='https://github.com/polkadot-js/extension'\n              >\n                Polkadot JS Extension\n              </a>\n            </span>\n            : null }\n          <CopyToClipboard text={accountSelected}>\n            <Button\n              basic\n              circular\n              size='large'\n              icon='user'\n              color={accountSelected ? 'green' : 'red'}\n            />\n          </CopyToClipboard>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n          <BalanceAnnotation accountSelected={accountSelected} />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n\nfunction BalanceAnnotation (props) {\n  const { accountSelected } = props;\n  const { api } = useSubstrate();\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.system.account(accountSelected, balance => {\n        setAccountBalance(balance.data.free.toHuman());\n      })\n        .then(unsub => {\n          unsubscribe = unsub;\n        })\n        .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api, accountSelected]);\n\n  return accountSelected ? (\n    <Label pointing='left'>\n      <Icon name='money' color='green' />\n      {accountBalance}\n    </Label>\n  ) : null;\n}\n\nexport default function AccountSelector (props) {\n  const { api, keyring } = useSubstrate();\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Button } from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Main (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.system.account\n      .multi(addresses, balances => {\n        const balancesMap = addresses.reduce((acc, address, index) => ({\n          ...acc, [address]: balances[index].data.free.toHuman()\n        }), {});\n        setBalances(balancesMap);\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, keyring, setBalances]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell width={10}>\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\n                {account.address}\n              </span>\n              <CopyToClipboard text={account.address}>\n                <Button\n                  basic\n                  circular\n                  compact\n                  size='mini'\n                  color='blue'\n                  icon='copy outline'\n                />\n              </CopyToClipboard>\n            </Table.Cell>\n            <Table.Cell width={3}>{\n              balances && balances[account.address] &&\n              balances[account.address]\n            }</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table, Grid, Label } from 'semantic-ui-react';\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Main (props) {\n  const { api } = useSubstrate();\n  const [blocks, setBlocks] = useState([]);\n\n  const getBlocks = api.derive.chain.subscribeNewHeads;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    getBlocks(async header => {\n      // Retrieve the chain name\n      const chain = await api.rpc.system.chain();\n      // console.log(`[ ${chain} ] : last block #${header.number} has hash ${header.hash}`);\n      if (header.number) {\n        setBlocks(prevState => ([\n          ...prevState,\n          {\n            chain: `${chain}`,\n            number: `${header.number}`,\n            hash: `${header.hash}`\n          }\n        ]));\n      }\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api, getBlocks]);\n\n  return (\n    <Grid.Column>\n      <h1>Latest Blocks</h1>\n      <Table celled striped size='small'>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Chain</Table.HeaderCell>\n            <Table.HeaderCell>Block Number</Table.HeaderCell>\n            <Table.HeaderCell>Block Hash</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>{blocks.map((block, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell width={3} textAlign='left'>\n              <Label ribbon style={{ color: 'red', fontWeight: 'bold', textTransform: 'uppercase' }}>{block.chain}</Label>\n            </Table.Cell>\n            <Table.Cell width={2}>\n              <span style={{ display: 'inline-block', minWidth: '21em', fontWeight: 'bold' }}>\n                #{block.number}\n              </span>\n            </Table.Cell>\n            <Table.Cell width={11} style={{ color: 'green', fontWeight: 'bold' }}>{block.hash}</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card, Form, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n  const [foundblock, setFoundblock] = useState(null);\n  const [searchType, setSearchType] = useState('BLOCKNUMBER');\n  const [searchParam, setSearchParam] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  const searchByNumber = async (blockNumber) => {\n    const chain = await api.rpc.system.chain();\n    await api.rpc.chain.getBlockHash(blockNumber).then(async blockHash => {\n      await api.rpc.chain.getHeader(blockHash).then(async foundBlockHeader => {\n        // console.log('\\r');\n        // console.log(`[ ${chain} ] : found block #${foundBlockHeader.number} has hash ${foundBlockHeader.hash}`);\n        // console.log('\\r');\n        setStatus(`[ ${chain} ] : found block #${foundBlockHeader.number} has hash ${foundBlockHeader.hash}`);\n        const signedBlock = await api.rpc.chain.getBlock(foundBlockHeader.hash);\n        const allRecords = await api.query.system.events();\n        signedBlock.block.extrinsics.forEach(({ isSigned, meta, method: { args, method, section } }, index) => {\n          // filter the specific events based on the phase and then the\n          // index of our extrinsic in the block\n          const events = allRecords\n            .filter(({ phase }) =>\n              phase.isApplyExtrinsic &&\n            phase.asApplyExtrinsic.eq(index)\n            )\n            .map(({ event }) => `${event.section}.${event.method}`);\n          let blockResult = '\\r';\n          // console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n          blockResult += `${section}.${method}:: ${events.join(', ') || 'no events'}`;\n          // console.log('\\r');\n          blockResult += '\\r';\n          // explicit display of name, args & documentation\n          // console.log(`${section}.${method}(${args.map((a) => a.toString()).join(', ')})`);\n          blockResult += `${section}.${method}(${args.map((a) => a.toString()).join(', ')})`;\n          // console.log('\\r');\n          blockResult += '\\r';\n          // console.log(meta.documentation.map((d) => d.toString()).join('\\n'));\n          blockResult += meta.documentation.map((d) => d.toString()).join('\\n');\n          setFoundblock(blockResult);\n          setSearchParam([]);\n        });\n      });\n    }).catch((e) => {\n      console.log('ERROR: ', e.message);\n      setStatus(`ERROR: ${e.message}`);\n    });\n  };\n\n  const searchByHash = async (blockHash) => {\n    const chain = await api.rpc.system.chain();\n    await api.rpc.chain.getBlock(blockHash).then(async foundBlock => {\n      const blockHeader = foundBlock.get('block').get('header');\n      setStatus(`[ ${chain} ] : found block #${blockHeader.number} has hash ${blockHeader.hash}`);\n      // console.log(`[ ${chain} ] : found block #${blockHeader.number} has hash ${blockHeader.hash}`);\n      // console.log('\\r');\n      const signedBlock = await api.rpc.chain.getBlock(blockHeader.hash);\n      const allRecords = await api.query.system.events();\n      signedBlock.block.extrinsics.forEach(({ isSigned, meta, method: { args, method, section } }, index) => {\n        // filter the specific events based on the phase and then the\n        // index of our extrinsic in the block\n        const events = allRecords\n          .filter(({ phase }) =>\n            phase.isApplyExtrinsic &&\n          phase.asApplyExtrinsic.eq(index)\n          )\n          .map(({ event }) => `${event.section}.${event.method}`);\n        let blockResult = '\\r';\n        blockResult += `${section}.${method}:: ${events.join(', ') || 'no events'}`;\n        // console.log(`${section}.${method}:: ${events.join(', ') || 'no events'}`);\n        // console.log('\\r');\n        // explicit display of name, args & documentation\n        blockResult += `${section}.${method}(${args.map((a) => a.toString()).join(', ')})`;\n        // console.log(`${section}.${method}(${args.map((a) => a.toString()).join(', ')})`);\n        // console.log('\\r');\n        blockResult += '\\r';\n        blockResult += meta.documentation.map((d) => d.toString()).join('\\n');\n        // console.log(meta.documentation.map((d) => d.toString()).join('\\n'));\n        setFoundblock(blockResult);\n        setSearchParam([]);\n      });\n    }).catch((e) => {\n      console.log('ERROR: ', e.message);\n      setStatus(`ERROR: ${e.message}`);\n    });\n  };\n\n  const onSearchTypeChange = (ev, data) => {\n    setSearchType(data.value);\n    setSearchParam([]);\n    // clear the formState\n    //  setFormState(initFormState);\n  };\n\n  const onSearchParamChange = (ev, data) => {\n    setSearchParam(data.value);\n    // clear the formState\n    //  setFormState(initFormState);\n  };\n\n  const paramField = [{\n    name: 'findblock',\n    type: '# Block Number',\n    optional: false\n  }, {\n    name: 'findblock',\n    type: 'Block Hash #',\n    optional: false\n  }];\n\n  return (\n    <Grid.Column width={16}>\n      <Form>\n        <h1>Search Blocks by number (height) or hash</h1>\n        <Card style={{ width: '100%' }}>\n          <Card.Content>\n            <Card.Meta>\n              <Form.Group style={{ overflowX: 'auto' }} inline>\n                <label>Search</label>\n                <Form.Radio\n                  label='by Block Number'\n                  name='searchType'\n                  value='BLOCKNUMBER'\n                  checked={searchType === 'BLOCKNUMBER'}\n                  onChange={onSearchTypeChange}\n                />\n                <Form.Radio\n                  label='by Block Hash'\n                  name='searchType'\n                  value='BLOCKHASH'\n                  checked={searchType === 'BLOCKHASH'}\n                  onChange={onSearchTypeChange}\n                />\n              </Form.Group>\n              <Form.Group>\n                {searchType === 'BLOCKNUMBER'\n                  ? <Form.Field key={`${paramField[0].name}-${paramField[0].type}`}>\n                    <Input\n                      style={{ minWidth: '269px' }}\n                      placeholder={paramField[0].type}\n                      fluid\n                      type='text'\n                      onChange={onSearchParamChange}\n                      state='searchParam'\n                      value={searchParam}\n                    />\n                  </Form.Field>\n                  : <Form.Field key={`${paramField[1].name}-${paramField[1].type}`}>\n                    <Input\n                      style={{ minWidth: '669px' }}\n                      placeholder={paramField[1].type}\n                      fluid\n                      type='text'\n                      onChange={onSearchParamChange}\n                      state='searchParam'\n                      value={searchParam}\n                    />\n                  </Form.Field>\n                }\n              </Form.Group>\n            </Card.Meta>\n          </Card.Content>\n          <Card.Content extra>\n            <Modal trigger={<Button disabled={searchParam.length <= 0} onClick={ () => searchType === 'BLOCKNUMBER' ? searchByNumber(searchParam) : searchByHash(searchParam) }>Search Block</Button>}>\n              <Modal.Header>Block Information<br/><small>{status}</small></Modal.Header>\n              <Modal.Content scrolling>\n                <Modal.Description>\n                  <pre>\n                    <code style={{ overflowWrap: 'break-word' }}>{foundblock}</code>\n                  </pre>\n                </Modal.Description>\n              </Modal.Content>\n            </Modal>\n          </Card.Content>\n        </Card>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function Searchblock (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.query ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\n// Events to be filtered from feed\nconst FILTERED_EVENTS = [\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n];\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    let unsub = null;\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const { event, phase } = record;\n          const types = event.typeDef;\n\n          // show what we are busy with\n          const eventName = `${event.section}:${\n            event.method\n          }:: (phase=${phase.toString()})`;\n\n          if (FILTERED_EVENTS.includes(eventName)) return;\n\n          // loop through each of the parameters, displaying the type and data\n          const params = event.data.map(\n            (data, index) => `${types[index].type}: ${data.toString()}`\n          );\n\n          setEventFeed(e => [{\n            icon: 'bell',\n            summary: `${eventName}-${e.length}`,\n            extraText: event.meta.documentation.join(', ').toString(),\n            content: params.join(', ')\n          }, ...e]);\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n\n  const { feedMaxHeight = 250 } = props;\n\n  return (\n    <Grid.Column width={8}>\n      <h1 style={{ float: 'left' }}>Events</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\n\nconst argIsOptional = (arg) =>\n  arg.type.toString().startsWith('Option<');\n\nfunction Main (props) {\n  const { api, jsonrpc } = useSubstrate();\n  const { accountPair } = props;\n  const [status, setStatus] = useState(null);\n\n  const [interxType, setInterxType] = useState('EXTRINSIC');\n  const [palletRPCs, setPalletRPCs] = useState([]);\n  const [callables, setCallables] = useState([]);\n  const [paramFields, setParamFields] = useState([]);\n\n  const initFormState = {\n    palletRpc: '',\n    callable: '',\n    inputParams: []\n  };\n\n  const [formState, setFormState] = useState(initFormState);\n  const { palletRpc, callable, inputParams } = formState;\n\n  const getApiType = (api, interxType) => {\n    if (interxType === 'QUERY') {\n      return api.query;\n    } else if (interxType === 'EXTRINSIC') {\n      return api.tx;\n    } else if (interxType === 'RPC') {\n      return api.rpc;\n    } else {\n      return api.consts;\n    }\n  };\n\n  const updatePalletRPCs = () => {\n    if (!api) { return; }\n    const apiType = getApiType(api, interxType);\n    const palletRPCs = Object.keys(apiType).sort()\n      .filter(pr => Object.keys(apiType[pr]).length > 0)\n      .map(pr => ({ key: pr, value: pr, text: pr }));\n    setPalletRPCs(palletRPCs);\n  };\n\n  const updateCallables = () => {\n    if (!api || palletRpc === '') { return; }\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\n      .map(c => ({ key: c, value: c, text: c }));\n    setCallables(callables);\n  };\n\n  const updateParamFields = () => {\n    if (!api || palletRpc === '' || callable === '') {\n      setParamFields([]);\n      return;\n    }\n\n    let paramFields = [];\n\n    if (interxType === 'QUERY') {\n      const metaType = api.query[palletRpc][callable].meta.type;\n      if (metaType.isPlain) {\n        // Do nothing as `paramFields` is already set to []\n      } else if (metaType.isMap) {\n        paramFields = [{\n          name: metaType.asMap.key.toString(),\n          type: metaType.asMap.key.toString(),\n          optional: false\n        }];\n      } else if (metaType.isDoubleMap) {\n        paramFields = [{\n          name: metaType.asDoubleMap.key1.toString(),\n          type: metaType.asDoubleMap.key1.toString(),\n          optional: false\n        }, {\n          name: metaType.asDoubleMap.key2.toString(),\n          type: metaType.asDoubleMap.key2.toString(),\n          optional: false\n        }];\n      }\n    } else if (interxType === 'EXTRINSIC') {\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\n\n      if (metaArgs && metaArgs.length > 0) {\n        paramFields = metaArgs.map(arg => ({\n          name: arg.name.toString(),\n          type: arg.type.toString(),\n          optional: argIsOptional(arg)\n        }));\n      }\n    } else if (interxType === 'RPC') {\n      let metaParam = [];\n\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\n        metaParam = jsonrpc[palletRpc][callable].params;\n      }\n\n      if (metaParam.length > 0) {\n        paramFields = metaParam.map(arg => ({\n          name: arg.name,\n          type: arg.type,\n          optional: arg.isOptional || false\n        }));\n      }\n    } else if (interxType === 'CONSTANT') {\n      paramFields = [];\n    }\n\n    setParamFields(paramFields);\n  };\n\n  useEffect(updatePalletRPCs, [api, interxType]);\n  useEffect(updateCallables, [api, interxType, palletRpc]);\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable]);\n\n  const onPalletCallableParamChange = (_, data) => {\n    setFormState(formState => {\n      let res;\n      const { state, value } = data;\n      if (typeof state === 'object') {\n        // Input parameter updated\n        const { ind, paramField: { type } } = state;\n        const inputParams = [...formState.inputParams];\n        inputParams[ind] = { type, value };\n        res = { ...formState, inputParams };\n      } else if (state === 'palletRpc') {\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\n      } else if (state === 'callable') {\n        res = { ...formState, [state]: value, inputParams: [] };\n      }\n      return res;\n    });\n  };\n\n  const onInterxTypeChange = (ev, data) => {\n    setInterxType(data.value);\n    // clear the formState\n    setFormState(initFormState);\n  };\n\n  const getOptionalMsg = (interxType) =>\n    interxType === 'RPC'\n      ? 'Optional Parameter'\n      : 'Leaving this field as blank will submit a NONE value';\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Pallet Interactor</h1>\n      <Form>\n        <Form.Group style={{ overflowX: 'auto' }} inline>\n          <label>Interaction Type</label>\n          <Form.Radio\n            label='Extrinsic'\n            name='interxType'\n            value='EXTRINSIC'\n            checked={interxType === 'EXTRINSIC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Query'\n            name='interxType'\n            value='QUERY'\n            checked={interxType === 'QUERY'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='RPC'\n            name='interxType'\n            value='RPC'\n            checked={interxType === 'RPC'}\n            onChange={onInterxTypeChange}\n          />\n          <Form.Radio\n            label='Constant'\n            name='interxType'\n            value='CONSTANT'\n            checked={interxType === 'CONSTANT'}\n            onChange={onInterxTypeChange}\n          />\n        </Form.Group>\n        <Form.Field>\n          <Dropdown\n            placeholder='Pallets / RPC'\n            fluid\n            label='Pallet / RPC'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='palletRpc'\n            value={palletRpc}\n            options={palletRPCs}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Callables'\n            fluid\n            label='Callable'\n            onChange={onPalletCallableParamChange}\n            search\n            selection\n            state='callable'\n            value={callable}\n            options={callables}\n          />\n        </Form.Field>\n        {paramFields.map((paramField, ind) =>\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\n            <Input\n              placeholder={paramField.type}\n              fluid\n              type='text'\n              label={paramField.name}\n              state={{ ind, paramField }}\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\n              onChange={onPalletCallableParamChange}\n            />\n            { paramField.optional\n              ? <Label\n                basic\n                pointing\n                color='teal'\n                content = { getOptionalMsg(interxType) }\n              />\n              : null\n            }\n          </Form.Field>\n        )}\n        <Form.Field style={{ textAlign: 'center' }}>\n          <InteractorSubmit\n            accountPair={accountPair}\n            setStatus={setStatus}\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nfunction InteractorSubmit (props) {\n  const { attrs: { interxType } } = props;\n  if (interxType === 'QUERY') {\n    return <TxButton\n      label = 'Query'\n      type = 'QUERY'\n      color = 'blue'\n      {...props}\n    />;\n  } else if (interxType === 'EXTRINSIC') {\n    return <TxGroupButton {...props} />;\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\n    return <TxButton\n      label = 'Submit'\n      type = {interxType}\n      color = 'blue'\n      {...props}\n    />;\n  }\n}\n\nexport default function Interactor (props) {\n  const { api } = useSubstrate();\n  return api.tx ? <Main {...props} /> : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta>\n            <span>v{metadata.version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/sekmet/substrate-front-end-template'>\n              Substrate Front End Template\n            </a> for Polkadot Hackathon!\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Form, Input, Grid, Card, Statistic } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { accountPair } = props;\n\n  // The transaction submission status\n  const [status, setStatus] = useState('');\n\n  // The currently stored value\n  const [currentValue, setCurrentValue] = useState(0);\n  const [formValue, setFormValue] = useState(0);\n\n  useEffect(() => {\n    let unsubscribe;\n    api.query.templateModule.something(newValue => {\n      // The storage value is an Option<u32>\n      // So we have to check whether it is None first\n      // There is also unwrapOr\n      if (newValue.isNone) {\n        setCurrentValue('<None>');\n      } else {\n        setCurrentValue(newValue.unwrap().toNumber());\n      }\n    }).then(unsub => {\n      unsubscribe = unsub;\n    })\n      .catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [api.query.templateModule]);\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Template Module</h1>\n      <Card centered>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label='Current Value'\n            value={currentValue}\n          />\n        </Card.Content>\n      </Card>\n      <Form>\n        <Form.Field>\n          <Input\n            label='New Value'\n            state='newValue'\n            type='number'\n            onChange={(_, { value }) => setFormValue(value)}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Store Something'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'doSomething',\n              inputParams: [formValue],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.templateModule && api.query.templateModule.something\n    ? <Main {...props} /> : null);\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid, Label, Icon } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Main (props) {\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({ addressTo: null, amount: 0 });\n  const { accountPair } = props;\n\n  const onChange = (_, data) =>\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\n\n  const { addressTo, amount } = formState;\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Label basic color='teal'>\n            <Icon name='hand point right' />\n            1 Unit = 1000000000000\n          </Label>\n        </Form.Field>\n        <Form.Field>Transfer more than the existential amount for account with 0 balance</Form.Field>\n        <Form.Field>\n          <Input\n            fluid\n            label='To'\n            type='text'\n            placeholder='address'\n            state='addressTo'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            fluid\n            label='Amount'\n            type='number'\n            state='amount'\n            onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Submit'\n            type='SIGNED-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'balances',\n              callable: 'transfer',\n              inputParams: [addressTo, amount],\n              paramFields: [true, true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid } from 'semantic-ui-react';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Main (props) {\n  const [status, setStatus] = useState('');\n  const [proposal, setProposal] = useState({});\n  const { accountPair } = props;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n  };\n\n  const handleFileChosen = file => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = e => {\n      const content = bufferToHex(fileReader.result);\n      setProposal(`0x${content}`);\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <Grid.Column width={8}>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            type='file'\n            id='file'\n            label='Wasm File'\n            accept='.wasm'\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field style={{ textAlign: 'center' }}>\n          <TxButton\n            accountPair={accountPair}\n            label='Upgrade'\n            type='UNCHECKED-SUDO-TX'\n            setStatus={setStatus}\n            attrs={{\n              palletRpc: 'system',\n              callable: 'setCode',\n              inputParams: [proposal],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport LatestBlocks from './LatestBlocks';\nimport BlockNumber from './BlockNumber';\nimport SearchBlock from './SearchBlock';\nimport Events from './Events';\nimport Interactor from './Interactor';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\nimport Upgrade from './Upgrade';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err, null, 4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row>\n            <SearchBlock />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <LatestBlocks />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Balances />\n          </Grid.Row>\n          <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row>\n            <Interactor accountPair={accountPair} />\n            <Events />\n          </Grid.Row>\n          <Grid.Row>\n            <TemplateModule accountPair={accountPair} />\n          </Grid.Row>\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}